/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("let fromCSVbtn = document.querySelector(\"#from_csv_btn\");\nlet fromCSVdrop = document.querySelector(\"#from_csv_dropdown\");\n\nlet userInput = document.querySelector(\"#user_input\"); //<textarea>\n\nlet toCSVbtn = document.querySelector(\"#to_csv_btn\");\nlet toCSVdrop = document.querySelector(\"#to_csv_dropdown\");\n\nlet tableDiv = document.querySelector(\"#table-div\");\nlet table = document.createElement(\"table\");\ntableDiv.appendChild(table);\n// let table = document.querySelector(\"table\");\nlet addRowBtn = document.createElement('button');\n\n// let isConverted = false;\n\nlet inputArr = [];\n\n//FROM CSV TO HTML TABLE EVENT LISTENER\nfromCSVbtn.addEventListener(\"click\", convertToTable)\n\n//my array\nconsole.log('my array ', inputArr);\n\n//UPDATE CELL - ONCHANGE LISTENER WITHIN THE <input> ELEMENT\n\n//ADD ROW EVENT LISTENER\naddRowBtn.addEventListener(\"click\", addRow);\n\n//FROM HTML TO CSV TABLE EVENT LISTENER \n//converts back to string and feeds into the textarea\ntoCSVbtn.addEventListener(\"click\", convertToCSV);\n\n//Create table if no table, if there is one then delete it and create new\nfunction convertToTable() {\n    //delete table if exists\n    // let table = document.querySelector(\"table\");\n    // console.log(\"line 36\", table)\n    table.remove();\n    table = document.createElement(\"table\");\n    tableDiv.appendChild(table);\n    \n    // try {\n    //     table.remove();\n    //     console.log(table)\n    // }catch (e) {\n    //     if (e instanceof TypeError) {\n    //       console.log(\"just a TypeErrror, nothing new\")\n    //     } else {\n    //       throw e; \n    //     }\n    // }\n    \n    if(!table){\n        //#table element DOES NOT exist\n        // table = document.createElement(\"table\");\n        // tableDiv.appendChild(table);\n        // table.setAttribute(\"id\", \"my-table\")\n        console.log(\"table element DOES NOT exist, creating <table>\");\n    }\n    else{\n        //#table element DOES exists\n        // x = document.getElementById(\"my-table\");\n        // x.remove(); //wont work dont know why\n        // tableDiv.empty(); //doesnt work either\n        // table.parentNode\n        // tableDiv.innerHTML(\"\");\n        //console.log(\"this\", this);\n        //console.log(\"removed?\", table);\n        // table = document.createElement(\"table\");\n        console.log(\"table element DOES exist, emptying inputArr\");\n        inputArr=[];\n    }\n    console.log(\"Starting the conversion, do I have the right <table>? \", table);\n    // table = document.createElement(\"table\");\n    let userInputStr = userInput.value;\n    // STEP 1: create an array\n    // separator type: \n    let sep = fromCSVdrop.value;\n    if (sep == \"semicolon\" ){\n        sep = \";\";\n    }else if (sep == \"coma\" ){\n        sep = \",\";\n    }\n\n    \n    let row = [];\n    let word = \"\";\n    //Loop through the string to make an array\n    //cc=current character, nc=next character\n    for (let i = 0; i < userInputStr.length; i++){ \n        let cc = userInputStr[i];  \n        let nc = userInputStr[i+1];\n        \n        //skip separator and newline\n        if (cc == sep) {\n            continue\n        }\n        else if (cc == \"\\n\") {\n            continue\n        }//contruct word string\n        else if (cc != sep && nc != sep && nc != \"\\n\" && userInputStr.indexOf(cc)!=userInputStr.length-1){ //userInputStr.indexOf(cc)==userInputStr[length-1]\n            word += cc;\n            //console.log(\"word maker in action!\", word,\"indexOfcc\", userInputStr.indexOf(cc), \"index of last character\", userInputStr.length-1 )\n            // console.log('first if', word)\n        }//just before sep append the word to the row array and empty the word string\n        else if (cc != sep && nc == sep) { \n            word += cc;\n            // console.log('second if', word);\n            row.push(word);\n            word = \"\";\n        }//just before newline append the word to the row array,empty the word string, append row to inputArr, empty row\n        else if (cc != sep && nc == null || cc != sep && nc == \"\\n\" ){  \n            word += cc;\n            // console.log('third if', word);\n            row.push(word);\n            word = \"\";\n            inputArr.push(row);\n            row = [];\n        }\n        \n    } \n    //STEP 2: convert array into table\n    console.log(\"Launching array to table conversion function\");\n    // tableDiv.appendChild(table);\n    arrayToTable(inputArr); //creates elements <table><tr><td><input></</</> from array\n    \n    \n    //STEP 3: append the addRowbtn\n    if (userInput.value == \"\"){\n        console.log(\"no input\")\n    }else{\n        tableDiv.appendChild(addRowBtn);\n        addRowBtn.textContent = \"Add row...\";\n    }\n    // console.log(\"at the end of the function isConverted=\", isConverted);\n    // isConverted = true //prohibits repeating table content on each button click\n    \n}\n\n//Function to convert an array into a table\nfunction arrayToTable(arr) {\n    // table = document.querySelector(\"table\");\n    console.log(\"inside arrayToTable, do we have it?\", table);\n    console.log(\"Running the array to table conversion\")\n    //Loop though each element of the main array to create a row\n    for (let i = 0; i < arr.length; i++){\n        let htmlRow = document.createElement(\"tr\");\n        table.appendChild(htmlRow);\n        let row = arr[i];\n        //Loop through each element of subarray to create cells\n        for (let j = 0; j < row.length; j++) {\n            let td = document.createElement(\"td\");\n            htmlRow.appendChild(td);\n            let tdInput = document.createElement(\"input\");\n            td.appendChild(tdInput); //<input>\n            tdInput.setAttribute(\"value\", row[j]); //<input value=>\n            tdInput.setAttribute(\"id\", `cell${i}${j}`);\n            tdInput.setAttribute(\"onchange\", `updateArray(${i}, ${j}, \"cell${i}${j}\")`);\n            // console.log(tdInput)\n        }\n    }\n}\n\n//Function to convert input => string => array => table\nfunction makeTable(){\n    \n}\n\n//Function to update input in the inputArr - event listener directly inside the element\n//<input value=\"Period\" id=\"cell00\" onchange=\"updateArray(0, 0, &quot;cell00&quot;)\">\nfunction updateArray(i, j, id){\n    //alert(\"you changed a cell, good for you!\")\n    let myCell = document.getElementById(id); //`${id}`\n    console.log(\"Changes applied to cell id: \", myCell);\n    console.log(\"Array input value before change is \", inputArr[i][j])\n    let defValue = myCell.defaultValue; //inputArr[0][0] = \n    let currValue = myCell.value;\n    console.log(`Default value was: ${defValue} and current value is: ${currValue}`)\n    inputArr[i][j] = currValue;\n    console.log(\"New input value in the array is: \", inputArr[i][j]);\n    console.log(\"After changes the array looks like this: \", inputArr)\n\n}\n\n//Function to add new rows\nfunction addRow(){ \n    let newRow = document.createElement(\"tr\");\n    let newSubArray = [];\n    // table = document.querySelector(\"table\");\n    table.appendChild(newRow);\n    // console.log(inputArr[0].length);\n    for (i = 0; i < inputArr[0].length; i++){\n        let newCell = document.createElement(\"td\");\n        let newInputCell = document.createElement(\"input\");\n        //specify the indices for new elements:\n        let innerIndex = i\n        let outerIndex = inputArr.length;\n\n        newRow.appendChild(newCell);\n        newCell.appendChild(newInputCell);\n        newSubArray.push(newInputCell.value);\n\n        newInputCell.setAttribute(\"id\", `cell${outerIndex}${innerIndex}`);\n        newInputCell.setAttribute(\"onchange\", `updateArray(${outerIndex}, ${innerIndex}, \"cell${outerIndex}${innerIndex}\")`);\n        // console.log(\"brand new cell: \", newInputCell,);\n    }\n    inputArr.push(newSubArray);\n    console.log(\"my array after adding new row and pushing new values: \", inputArr);\n}\n\n//Function to convert back to CSV and overwrite in the textarea\n//include \\n characters!!\nfunction convertToCSV() {\n    console.log(\"im removing the table! is it working?\", tableDiv)\n    let sep = toCSVdrop.value;\n\n    if (sep == \"semicolon\"){\n        sep = \";\";\n    }else if (sep == \"coma\"){\n        sep = \",\";\n    }\n    for (i = 0; i < inputArr.length; i++){\n        //index of the last thing in a subarray in order to add newline to it:\n        let x = inputArr[i].length // 3\n        let y = x-1 //2\n        inputArr[i][y] = inputArr[i][y] + \"\\n\"\n        console.log(inputArr[i][y])\n        //join the subarrays with sep as well\n        console.log(\"inputArr[i] is... \", inputArr[i]);\n        //try catch here if inputArr is array\n        //if inputArr[i] is an array\n        try {\n            inputArr[i] = inputArr[i].join(sep);\n        }catch (e) {\n            if (e instanceof TypeError) {\n              console.log(\"Already transformed!\")\n            } else {\n              throw e; \n            }\n        }\n    }\n    let myNewString = inputArr.join(sep);\n    console.log(\"This is my new string: \", myNewString);\n    //feed the new string into the <textarea>\n    userInput.value = myNewString;\n    // table.remove();\n}\n\n\n//# sourceURL=webpack://csv-converter/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;